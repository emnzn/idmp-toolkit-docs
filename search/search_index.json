{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to IDMPToolkit","text":"<ul> <li> <p> Getting Started</p> <p>Install the package and begin your workflow in minutes.</p> <p> Start here</p> </li> <li> <p> Tutorials</p> <p>Step-by-step guides for patching, model usage, more.</p> <p> View tutorials</p> </li> <li> <p> Modules</p> <p>API reference for preprocess, segmentation, annotations, embeddings, and more.</p> <p> Explore modules</p> </li> <li> <p> Contributing</p> <p>Learn how to add functions, write docstrings, and submit PRs.</p> <p> Contribution guide</p> </li> <li> <p> Changelog</p> <p>Track what\u2019s new in each release of the toolkit.</p> <p> View changelog</p> </li> <li> <p> References</p> <p>Related research papers and background material.</p> <p> References</p> </li> </ul>"},{"location":"contributing/","title":"Contribute to IDMPToolkit","text":""},{"location":"contributing/#environment-setup","title":"Environment Setup","text":"<p>To get started, begin by cloning the repository via:</p> <pre><code>git clone git@git.cdplab.org:ericmonzon/idmp-toolkit.git\n</code></pre> <p>Once cloned, you may follow the steps in Getting Started to create your environment.</p>"},{"location":"contributing/#poetry-installation","title":"Poetry Installation","text":"<p>We use Poetry to manage dependencies and environments.  </p> <p>Installing Poetry is highly recommended for a seamless management of dependencies for our library. Please refer to the link above for installation instructions.</p>"},{"location":"contributing/#dependency-management","title":"Dependency Management","text":"<p>When developing functions that rely on dependencies that are not yet in <code>idmp-toolkit</code>, instead of performing an installation via <code>pip install &lt;package-name&gt;</code> or <code>conda install &lt;package-name&gt;</code>, please perform the installation as follows:</p> <pre><code>poetry add &lt;package-name&gt;\n</code></pre> <p>Note</p> <p>This command must be executed from the project root (the folder containing <code>pyproject.toml</code>). It will install the dependency into your environment and automatically list it as a dependency for <code>idmp-toolkit</code>, preventing dependency errors in future installations.</p>"},{"location":"contributing/#branching","title":"Branching","text":"<p>All work should be done in a feature branch, not directly on <code>main</code>. This ensures that <code>main</code> always remains stable and ready for release.</p> <p>Please follow the following convention to keep the repository clean and maintainable.</p> <p><pre><code># Branch naming convention:\nfeature/&lt;task&gt;-&lt;function&gt;-&lt;contributor_name&gt;\n</code></pre> Examples:</p> <ul> <li><code>feature/preprocess-mask-eric</code></li> <li><code>feature/preprocess-patch-yijing</code></li> <li><code>feature/models-segmentation-chengxiang</code></li> <li><code>feature/data-split-haoda</code></li> </ul> <p>This format makes it easy to see what is being developed in each branch at a glance.</p>"},{"location":"contributing/#creating-a-branch","title":"Creating a Branch","text":"<p>Always start from the latest <code>main</code> branch:</p> <pre><code># Update local main\ngit checkout main\ngit pull origin main\n\n# Create a feature branch\ngit checkout -b feature/&lt;task&gt;-&lt;function&gt;-&lt;contributor-name&gt;\ngit push -u origin feature/&lt;task&gt;-&lt;function&gt;-&lt;contributor-name&gt;\n</code></pre>"},{"location":"contributing/#pushing-to-a-branch","title":"Pushing to a Branch","text":"<pre><code>git add .\ngit commit -m \"Add rule-based tissue masking\"\ngit push -u origin feature/preprocess-mask-&lt;contributor-name&gt;\n</code></pre>"},{"location":"contributing/#collaboration-principles","title":"Collaboration Principles","text":"<p>To keep development smooth and conflict-free, we follow these practices:</p> <ul> <li> <p>Work only on feature branches   Nobody commits directly to <code>main</code>. Every change starts from a branch (see Branching Convention).</p> </li> <li> <p>Respect ownership of functions   Contributors may work in the same file, but do not edit or overwrite someone else\u2019s function without discussion.</p> </li> <li> <p>Conflicts are expected, but manageable   Merge conflicts will happen when multiple people branch from the same point and edit the same file. As long as contributors work on separate functions, any conflicts will be line-based and trivial to resolve.</p> </li> <li> <p>Small, modular changes   Keep pull requests focused. Small changes are easier to review and reduce the chance of large, messy conflicts.</p> </li> </ul>"},{"location":"contributing/#module-organization","title":"Module Organization","text":"<pre><code>idmp/\n\u251c\u2500\u2500 preprocess/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 mask.py                 # Rule-based + model-based tissue masking\n\u2502   \u251c\u2500\u2500 iam.py                  # Image assessment methods (variation, quality, etc.)\n\u2502   \u251c\u2500\u2500 patch.py                # Sliding window and random patch sampling\n\u2502   \u2514\u2500\u2500 wsi_constructor.py      # Reconstruct WSIs from patches + coordinates\n\u2502\n\u251c\u2500\u2500 visualization/\n\u2502   \u2514\u2500\u2500 annotation_stats.py     # Number of slides/class, annotation counts, area stats\n\u2502\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 split.py                # Dataset splitting (train/val/test)\n\u2502   \u2514\u2500\u2500 qc.py                   # Quality control functions\n\u2502\n\u2514\u2500\u2500 models/                     # Model initialization scripts\n    \u251c\u2500\u2500 foundation.py           # Foundation models\n    \u251c\u2500\u2500 segmentation/           # Segmentation models\n    \u2502   \u251c\u2500\u2500 glands.py           # Gland segmentation models\n    \u2502   \u2514\u2500\u2500 tissue.py           # Tissue segmentation models\n    \u2514\u2500\u2500 classification/         # Classification models\n</code></pre> <p>To keep the function library clean and maintainable, instead of placing everything into a single large file like <code>preprocess.py</code>, we break down functionality by sub-tasks. Each sub-task lives in its own module (<code>mask.py</code>, <code>patch.py</code>, etc.), while the package <code>__init__.py</code> collects these into a stable public API.  </p> <p>This structure makes it easier to:</p> <ul> <li> <p>Maintain   Smaller files are easier to read, test, and refactor.  </p> </li> <li> <p>Collaborate   Less contributors working on the same file, minimizing conflicts.</p> </li> <li> <p>Extend   New features can be added in a more organized manner, and it will be easier to find existing functions.</p> </li> <li> <p>Expose a clean API   With <code>__init__.py</code> users can import functions seamlessly without worrying about internal layout. </p> </li> </ul>"},{"location":"contributing/#example-__init__py","title":"Example <code>__init__.py</code>","text":"<pre><code># idmp/preprocess/__init__.py\n\nfrom .iam import match_histogram\nfrom .wsi_constructor import WSIConstructor\nfrom .patch import sliding_window, random_patch\nfrom .mask import threshold_segmenter, model_segmenter\n\n__all__ = [\n    \"threshold_segmenter\",\n    \"model_segmenter\",\n    \"match_histogram\",\n    \"sliding_window\",\n    \"random_patch\",\n    \"WSIConstructor\",\n]\n</code></pre>"},{"location":"contributing/#simplified-imports","title":"Simplified Imports","text":"<p>Without <code>__init__.py</code>:</p> <pre><code>from idmp.iam import match_histogram\nfrom idmp.preprocess.patch import sliding_window\nfrom idmp.preprocess.mask import threshold_segmenter\nfrom idmp.preprocess.wsi_constructor import WSIConstructor\n</code></pre> <p>With <code>__init__.py</code>:</p> <pre><code>from idmp.preprocess import (\n    match_histogram,\n    sliding_window,\n    threshold_segmenter, \n    WSIConstructor\n)\n</code></pre> <p>Users only interact with a flat, stable API, while contributors can keep adding new files without bloating imports.</p>"},{"location":"contributing/#code-convention","title":"Code Convention","text":""},{"location":"contributing/#typing","title":"Typing","text":"<p>Always use Python type hints for function signatures and class methods.</p> <pre><code>def threshold_segmenter(\n    slide: np.ndarray,\n    apply_morphological_closing: bool = True,\n    ksize: int = 3\n    ) -&gt; np.ndarray:\n\n    ...\n</code></pre> <p>Specifying the expected input and return types makes functions easier to use and maintain, as future modifications only need to preserve these types to prevent errors.</p>"},{"location":"contributing/#docstrings","title":"Docstrings","text":"<p>Document every function, and class using NumPy-style docstrings. Clear docstrings describe what a function does, explain its parameters and return values, and make the codebase easier to use and extend.</p> <pre><code>def threshold_segmenter(\n    slide: np.ndarray,\n    apply_morphological_closing: bool = True,\n    ksize: int = 3\n    ) -&gt; np.ndarray:\n\n    \"\"\"\n    Segments tissue regions by thresholding the saturation channel \n    with otsu.\n\n    Parameters\n    ----------\n    slide: np.ndarray\n        The image as a numpy array.\n        The image is assumed to be in RGB.\n\n    apply_morphological_closing: bool\n        Whether to close small gaps in the tissue\n\n    ksize: \n        The kernel size for blurring and morphological closing.\n        Must be odd.\n\n    Returns\n    -------\n    tissue_mask: np.ndarray\n        The segmented tissue mask.\n    \"\"\"\n\n    ...\n\n    return tissue_mask\n</code></pre> <p>Please refer to this guide for more details.</p>"},{"location":"getting_started/","title":"Getting started with IDMPToolkit","text":""},{"location":"getting_started/#1-setup-ssh-keys-with-gitea","title":"1. Setup SSH Keys with Gitea","text":"<p>To install the package, make sure your SSH keys are configured with the lab's Git server. For a step-by-step guide, refer to the GitHub documentation.</p> <p>Once setup, you can test your connection:</p> <pre><code>ssh -T git@git.cdplab.org\n</code></pre>"},{"location":"getting_started/#2-package-installation","title":"2. Package Installation","text":"<p>Create a virtual environment:</p> <pre><code>conda create -n idmp python=3.11\n</code></pre> <p>Enter virtual environment:</p> <pre><code>conda activate idmp\n</code></pre> <p>You can install the package directly from the lab\u2019s private Git server:</p> <pre><code>pip install git+ssh://git@git.cdplab.org/ericmonzon/idmp-toolkit.git\n</code></pre>"}]}